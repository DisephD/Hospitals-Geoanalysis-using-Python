# -*- coding: utf-8 -*-
"""Data Manipulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/

# **Data Manipulation**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import geopandas as gpd
import re
from shapely.geometry import Point
from geopy.distance import geodesic
from sklearn.cluster import MiniBatchKMeans
from itertools import combinations
from multiprocessing import Pool, cpu_count
import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline
# %reload_ext autoreload
# %autoreload 2

nig_hospital_data = pd.read_excel("/content/nigeria-hospitals-and-clinics-hxl-xlsx-1.xlsx")

df = nig_hospital_data.drop(axis= 0, index= 0)
df.start_date = pd.to_datetime(df.start_date, errors = "coerce", yearfirst= True, dayfirst= False)
df.drop_duplicates(keep= "first", inplace = True)
df.fillna(np.nan, inplace = True)

gdf = gpd.GeoDataFrame(df)
gdf.longitude = gdf.longitude.astype(str).apply(lambda x: re.sub(r'\.{2,}','.',x))
gdf.latitude = gdf.latitude.astype(str).apply(lambda x: re.sub(r'\.{2,}','.',x))
gdf.latitude = gdf.latitude.astype(str).str.replace("`","").str.replace(":","").str.strip()
gdf.longitude = gdf.longitude.astype(str).str.replace(",","").str.strip()
gdf.latitude = pd.to_numeric (gdf.latitude, errors = "coerce")
gdf.longitude = pd.to_numeric (gdf.longitude, errors = "coerce")
gdf.geometry = gdf.apply(lambda x: Point (float(x.longitude), float(x.latitude)), axis = 1)
gdf= gpd.GeoDataFrame(gdf,geometry ="geometry", crs="epsg:4326")


#switch the order of point geometry
filtered_gdf = gdf[~(gdf.latitude.isna() | gdf.longitude.isna())]
def switch_coords (point):
  if not point.is_empty:
    return Point (point.y, point.x)
  else:
    return point
filtered_gdf["lat_lng"] = filtered_gdf.geometry.apply(switch_coords)


# Calculate distances for a pair of hospitals
def calculate_distances(pair):
    return geodesic(pair[0], pair[1]).miles

# Calculate distances for each state
def calculate_state_distances(state, operational_hospitals):
    state_hospitals = operational_hospitals[operational_hospitals['state'] == state]
    lat_lng = state_hospitals[['latitude', 'longitude']].values

    # Cluster hospitals to reduce the number of distance calculations
    kmeans = MiniBatchKMeans(n_clusters=min(len(lat_lng) // 10, 15), batch_size=1000, random_state=42).fit(lat_lng)
    cluster_centers = kmeans.cluster_centers_
    pairs = list(combinations(cluster_centers, 2))

    # I'll use multiprocessing to calculate distances for each pair of cluster centers
    with Pool(cpu_count()) as pool:
        distances = pool.map(calculate_distances, pairs)

    # Average and median distances for the state
    if distances:
        avg_distance = np.mean(distances)
        median_distance = np.median(distances)
        return {'avg': avg_distance, 'median': median_distance}
    else:
        return None

operational_hospitals = filtered_gdf[filtered_gdf['operation_status'] == 'Operational']
unique_states = operational_hospitals['state'].unique()
state_distances = {}
for state in unique_states:
    state_distances[state] = calculate_state_distances(state, operational_hospitals)

state_distance_df = pd.DataFrame([(k, v['avg'], v['median']) for k, v in state_distances.items()], columns=['State', 'Average_m', 'Median_m'])
state_distance_df["Average_km"] = state_distance_df["Average_m"]*1.60934
state_distance_df["Median_km"] = state_distance_df["Median_m"]*1.60934
state_distance_df.head()


regions= [{"region": "North Central", "states": ['Niger', 'Kwara', 'Nasarawa', 'Benue', 'Kogi','FCT']},
          {"region": "North East", "states": ['Yobe', 'Borno', 'Gombe', 'Bauchi', 'Adamawa', 'Taraba']},
          {"region": "North West", "states": ['Sokoto', 'Kebbi', 'Zamfara', 'Katsina', 'Kano','Jigawa', 'Kaduna']},
          {"region": "South West", "states": ['Oyo', 'Osun', 'Ekiti', 'Ondo','Ogun', 'Lagos']},
          {"region": "South East", "states": ['Enugu', 'Ebonyi', 'Anambra', 'Imo', 'Abia']},
          {"region": "South South", "states": ['Edo', 'Delta', 'Bayelsa', 'Rivers', 'Akwa-Ibom', 'Cross River']}]
nig_regions_data = []
for region in regions:
    for state in region['states']:
        nig_regions_data.append({'region': region['region'], 'reg_state': state})

# Create the DataFrame from the list of dictionaries
nig_regions = pd.DataFrame(nig_regions_data)

#merge regions to the dataframe
gdf= gdf.merge(nig_regions, how = "left", left_on= "state", right_on = "reg_state")
gdf= gdf.drop("reg_state",axis=1)

#save as csv
gdf.to_csv("nigerian_hosp_data_formatted.csv", index=False)
state_distance_df.to_csv("State_distances.csv", index=False)







